import cv2
import numpy as np


def remove_watermark_from_video(input_video_path, output_video_path, watermark_position):
    # Carregar o vídeo
    video = cv2.VideoCapture(input_video_path)
    frame_width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = int(video.get(cv2.CAP_PROP_FPS))
    codec = cv2.VideoWriter_fourcc(*'mp4v')
    output_video = cv2.VideoWriter(output_video_path, codec, fps, (frame_width, frame_height))

    # Dimensões da marca d'água
    x, y, w, h = watermark_position

    while True:
        ret, frame = video.read()
        if not ret:
            break

        # Selecionar a região da marca d'água
        region = frame[y:y + h, x:x + w]

        # Substituir com interpolação
        mask = np.zeros_like(region)
        frame[y:y + h, x:x + w] = cv2.inpaint(frame, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)

        # Escrever o frame processado no novo vídeo
        output_video.write(frame)

    video.release()
    output_video.release()


# Solicitar caminhos do usuário
input_video_path = input("Insira o caminho do vídeo de entrada: ").strip()
output_video_path = input("Insira o caminho do vídeo de saída: ").strip()

# Solicitar as dimensões da marca d'água
print("Insira as coordenadas da marca d'água:")
x = int(input("Posição X: "))
y = int(input("Posição Y: "))
w = int(input("Largura da marca d'água: "))
h = int(input("Altura da marca d'água: "))
watermark_position = (x, y, w, h)

# Remover a marca d'água
remove_watermark_from_video(input_video_path, output_video_path, watermark_position)
print(f"Vídeo processado salvo em: {output_video_path}")
